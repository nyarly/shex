# This file is automatically generated by /Users/gregg/Projects/ebnf/lib/ebnf/base.rb
# BRANCH derived from etc/shex.ebnf
module ShEx::Meta
  START = :shexDoc

  BRANCH = {
    :annotation => {
      "//" => ["//", :predicate, :_annotation_1],
    },
    :_annotation_1 => {
      :DECIMAL => [:literal],
      :DOUBLE => [:literal],
      :INTEGER => [:literal],
      :IRIREF => [:iri],
      :PNAME_LN => [:iri],
      :PNAME_NS => [:iri],
      :STRING_LITERAL1 => [:literal],
      :STRING_LITERAL2 => [:literal],
      :STRING_LITERAL_LONG1 => [:literal],
      :STRING_LITERAL_LONG2 => [:literal],
      "false" => [:literal],
      "true" => [:literal],
    },
    :baseDecl => {
      "BASE" => ["BASE", :IRIREF],
    },
    :blankNode => {
      :BLANK_NODE_LABEL => [:BLANK_NODE_LABEL],
    },
    :booleanLiteral => {
      "false" => ["false"],
      "true" => ["true"],
    },
    :cardinality => {
      "*" => ["*"],
      "+" => ["+"],
      "?" => ["?"],
      :REPEAT_RANGE => [:REPEAT_RANGE],
    },
    :codeDecl => {
      "%" => ["%", :iri, :_codeDecl_1],
    },
    :_codeDecl_1 => {
      "%" => ["%"],
      :CODE => [:CODE],
    },
    :datatype => {
      :IRIREF => [:iri],
      :PNAME_LN => [:iri],
      :PNAME_NS => [:iri],
    },
    :directive => {
      "BASE" => [:baseDecl],
      "PREFIX" => [:prefixDecl],
    },
    :encapsulatedShape => {
      "(" => ["(", :groupShape, ")", :_encapsulatedShape_1, :_encapsulatedShape_2, :semanticActions],
    },
    :_encapsulatedShape_1 => {
      "%" => [],
      ")" => [],
      "*" => [:cardinality],
      "+" => [:cardinality],
      "//" => [],
      ";" => [],
      "?" => [:cardinality],
      :REPEAT_RANGE => [:cardinality],
      "|" => [],
      "}" => [],
    },
    :_encapsulatedShape_2 => {
      "%" => [],
      ")" => [],
      "//" => [:_encapsulatedShape_3],
      ";" => [],
      "|" => [],
      "}" => [],
    },
    :_encapsulatedShape_3 => {
      "//" => [:annotation, :_encapsulatedShape_2],
    },
    :exclusion => {
      "-" => ["-", :iri, :_exclusion_1],
    },
    :_exclusion_1 => {
      "-" => [],
      "." => [],
      :DECIMAL => [],
      :DOUBLE => [],
      :INTEGER => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :STRING_LITERAL1 => [],
      :STRING_LITERAL2 => [],
      :STRING_LITERAL_LONG1 => [],
      :STRING_LITERAL_LONG2 => [],
      "]" => [],
      "false" => [],
      "true" => [],
      "~" => ["~"],
    },
    :groupShape => {
      "!" => [:unaryShape, :_groupShape_1],
      "$" => [:unaryShape, :_groupShape_1],
      "&" => [:unaryShape, :_groupShape_1],
      "(" => [:unaryShape, :_groupShape_1],
      :IRIREF => [:unaryShape, :_groupShape_1],
      :PNAME_LN => [:unaryShape, :_groupShape_1],
      :PNAME_NS => [:unaryShape, :_groupShape_1],
      :RDF_TYPE => [:unaryShape, :_groupShape_1],
      "^" => [:unaryShape, :_groupShape_1],
    },
    :_groupShape_1 => {
      ")" => [],
      ";" => [:_groupShape_3],
      "|" => [],
      "}" => [],
    },
    :_groupShape_2 => {
      ";" => [";", :_groupShape_4],
    },
    :_groupShape_3 => {
      ";" => [:_groupShape_2, :_groupShape_1],
    },
    :_groupShape_4 => {
      "!" => [:unaryShape],
      "$" => [:unaryShape],
      "&" => [:unaryShape],
      "(" => [:unaryShape],
      ")" => [],
      ";" => [],
      :IRIREF => [:unaryShape],
      :PNAME_LN => [:unaryShape],
      :PNAME_NS => [:unaryShape],
      :RDF_TYPE => [:unaryShape],
      "^" => [:unaryShape],
      "|" => [],
      "}" => [],
    },
    :inclPropertySet => {
      "EXTRA" => ["EXTRA", :_inclPropertySet_1],
    },
    :_inclPropertySet_1 => {
      :IRIREF => [:predicate, :_inclPropertySet_2],
      :PNAME_LN => [:predicate, :_inclPropertySet_2],
      :PNAME_NS => [:predicate, :_inclPropertySet_2],
      :RDF_TYPE => [:predicate, :_inclPropertySet_2],
    },
    :_inclPropertySet_2 => {
      "&" => [],
      "CLOSED" => [],
      "EXTRA" => [],
      :IRIREF => [:_inclPropertySet_3],
      :PNAME_LN => [:_inclPropertySet_3],
      :PNAME_NS => [:_inclPropertySet_3],
      :RDF_TYPE => [:_inclPropertySet_3],
      "{" => [],
    },
    :_inclPropertySet_3 => {
      :IRIREF => [:predicate, :_inclPropertySet_2],
      :PNAME_LN => [:predicate, :_inclPropertySet_2],
      :PNAME_NS => [:predicate, :_inclPropertySet_2],
      :RDF_TYPE => [:predicate, :_inclPropertySet_2],
    },
    :include => {
      "&" => ["&", :shapeLabel],
    },
    :includeSet => {
      "&" => ["&", :_includeSet_1],
    },
    :_includeSet_1 => {
      :BLANK_NODE_LABEL => [:shapeLabel, :_includeSet_2],
      :IRIREF => [:shapeLabel, :_includeSet_2],
      :PNAME_LN => [:shapeLabel, :_includeSet_2],
      :PNAME_NS => [:shapeLabel, :_includeSet_2],
    },
    :_includeSet_2 => {
      "&" => [],
      :BLANK_NODE_LABEL => [:_includeSet_3],
      "CLOSED" => [],
      "EXTRA" => [],
      :IRIREF => [:_includeSet_3],
      :PNAME_LN => [:_includeSet_3],
      :PNAME_NS => [:_includeSet_3],
      "{" => [],
    },
    :_includeSet_3 => {
      :BLANK_NODE_LABEL => [:shapeLabel, :_includeSet_2],
      :IRIREF => [:shapeLabel, :_includeSet_2],
      :PNAME_LN => [:shapeLabel, :_includeSet_2],
      :PNAME_NS => [:shapeLabel, :_includeSet_2],
    },
    :iri => {
      :IRIREF => [:IRIREF],
      :PNAME_LN => [:prefixedName],
      :PNAME_NS => [:prefixedName],
    },
    :iriRange => {
      "." => [:_iriRange_2],
      :IRIREF => [:_iriRange_1],
      :PNAME_LN => [:_iriRange_1],
      :PNAME_NS => [:_iriRange_1],
    },
    :_iriRange_1 => {
      :IRIREF => [:iri, :_iriRange_3],
      :PNAME_LN => [:iri, :_iriRange_3],
      :PNAME_NS => [:iri, :_iriRange_3],
    },
    :_iriRange_2 => {
      "." => [".", :_iriRange_7],
    },
    :_iriRange_3 => {
      "." => [],
      :DECIMAL => [],
      :DOUBLE => [],
      :INTEGER => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :STRING_LITERAL1 => [],
      :STRING_LITERAL2 => [],
      :STRING_LITERAL_LONG1 => [],
      :STRING_LITERAL_LONG2 => [],
      "]" => [],
      "false" => [],
      "true" => [],
      "~" => [:_iriRange_4],
    },
    :_iriRange_4 => {
      "~" => ["~", :_iriRange_5],
    },
    :_iriRange_5 => {
      "-" => [:_iriRange_6],
      "." => [],
      :DECIMAL => [],
      :DOUBLE => [],
      :INTEGER => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :STRING_LITERAL1 => [],
      :STRING_LITERAL2 => [],
      :STRING_LITERAL_LONG1 => [],
      :STRING_LITERAL_LONG2 => [],
      "]" => [],
      "false" => [],
      "true" => [],
    },
    :_iriRange_6 => {
      "-" => [:exclusion, :_iriRange_5],
    },
    :_iriRange_7 => {
      "-" => [:exclusion, :_iriRange_8],
    },
    :_iriRange_8 => {
      "-" => [:_iriRange_9],
      "." => [],
      :DECIMAL => [],
      :DOUBLE => [],
      :INTEGER => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :STRING_LITERAL1 => [],
      :STRING_LITERAL2 => [],
      :STRING_LITERAL_LONG1 => [],
      :STRING_LITERAL_LONG2 => [],
      "]" => [],
      "false" => [],
      "true" => [],
    },
    :_iriRange_9 => {
      "-" => [:exclusion, :_iriRange_8],
    },
    :literal => {
      :DECIMAL => [:numericLiteral],
      :DOUBLE => [:numericLiteral],
      :INTEGER => [:numericLiteral],
      :STRING_LITERAL1 => [:rdfLiteral],
      :STRING_LITERAL2 => [:rdfLiteral],
      :STRING_LITERAL_LONG1 => [:rdfLiteral],
      :STRING_LITERAL_LONG2 => [:rdfLiteral],
      "false" => [:booleanLiteral],
      "true" => [:booleanLiteral],
    },
    :negShapeAtom => {
      "!" => [:_negShapeAtom_1, :shapeAtom],
      "&" => [:_negShapeAtom_1, :shapeAtom],
      "(" => [:_negShapeAtom_1, :shapeAtom],
      "." => [:_negShapeAtom_1, :shapeAtom],
      "@" => [:_negShapeAtom_1, :shapeAtom],
      :ATPNAME_LN => [:_negShapeAtom_1, :shapeAtom],
      :ATPNAME_NS => [:_negShapeAtom_1, :shapeAtom],
      "BNODE" => [:_negShapeAtom_1, :shapeAtom],
      "CLOSED" => [:_negShapeAtom_1, :shapeAtom],
      "EXTRA" => [:_negShapeAtom_1, :shapeAtom],
      "IRI" => [:_negShapeAtom_1, :shapeAtom],
      :IRIREF => [:_negShapeAtom_1, :shapeAtom],
      "LITERAL" => [:_negShapeAtom_1, :shapeAtom],
      "NONLITERAL" => [:_negShapeAtom_1, :shapeAtom],
      "NOT" => [:_negShapeAtom_1, :shapeAtom],
      :PNAME_LN => [:_negShapeAtom_1, :shapeAtom],
      :PNAME_NS => [:_negShapeAtom_1, :shapeAtom],
      "[" => [:_negShapeAtom_1, :shapeAtom],
      "{" => [:_negShapeAtom_1, :shapeAtom],
    },
    :_negShapeAtom_1 => {
      "!" => [:_negShapeAtom_2],
      "&" => [],
      "(" => [],
      "." => [],
      "@" => [],
      :ATPNAME_LN => [],
      :ATPNAME_NS => [],
      "BNODE" => [],
      "CLOSED" => [],
      "EXTRA" => [],
      "IRI" => [],
      :IRIREF => [],
      "LITERAL" => [],
      "NONLITERAL" => [],
      "NOT" => [:_negShapeAtom_2],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "[" => [],
      "{" => [],
    },
    :_negShapeAtom_2 => {
      "!" => ["!"],
      "NOT" => ["NOT"],
    },
    :nonLiteralKind => {
      "BNODE" => ["BNODE"],
      "IRI" => ["IRI"],
      "NONLITERAL" => ["NONLITERAL"],
    },
    :notStartAction => {
      :BLANK_NODE_LABEL => [:shape],
      :IRIREF => [:shape],
      :PNAME_LN => [:shape],
      :PNAME_NS => [:shape],
      "start" => [:start],
    },
    :numericFacet => {
      "FRACTIONDIGITS" => [:_numericFacet_2],
      "MAXEXCLUSIVE" => [:_numericFacet_1],
      "MAXINCLUSIVE" => [:_numericFacet_1],
      "MINEXCLUSIVE" => [:_numericFacet_1],
      "MININCLUSIVE" => [:_numericFacet_1],
      "TOTALDIGITS" => [:_numericFacet_2],
    },
    :_numericFacet_1 => {
      "MAXEXCLUSIVE" => [:numericRange, :_numericFacet_3],
      "MAXINCLUSIVE" => [:numericRange, :_numericFacet_3],
      "MINEXCLUSIVE" => [:numericRange, :_numericFacet_3],
      "MININCLUSIVE" => [:numericRange, :_numericFacet_3],
    },
    :_numericFacet_2 => {
      "FRACTIONDIGITS" => [:numericLength, :INTEGER],
      "TOTALDIGITS" => [:numericLength, :INTEGER],
    },
    :_numericFacet_3 => {
      :DECIMAL => [:numericLiteral],
      :DOUBLE => [:numericLiteral],
      :INTEGER => [:numericLiteral],
      :STRING_LITERAL1 => [:_numericFacet_4],
      :STRING_LITERAL2 => [:_numericFacet_4],
      :STRING_LITERAL_LONG1 => [:_numericFacet_4],
      :STRING_LITERAL_LONG2 => [:_numericFacet_4],
    },
    :_numericFacet_4 => {
      :STRING_LITERAL1 => [:string, "^^", :datatype],
      :STRING_LITERAL2 => [:string, "^^", :datatype],
      :STRING_LITERAL_LONG1 => [:string, "^^", :datatype],
      :STRING_LITERAL_LONG2 => [:string, "^^", :datatype],
    },
    :numericLength => {
      "FRACTIONDIGITS" => ["FRACTIONDIGITS"],
      "TOTALDIGITS" => ["TOTALDIGITS"],
    },
    :numericLiteral => {
      :DECIMAL => [:DECIMAL],
      :DOUBLE => [:DOUBLE],
      :INTEGER => [:INTEGER],
    },
    :numericRange => {
      "MAXEXCLUSIVE" => ["MAXEXCLUSIVE"],
      "MAXINCLUSIVE" => ["MAXINCLUSIVE"],
      "MINEXCLUSIVE" => ["MINEXCLUSIVE"],
      "MININCLUSIVE" => ["MININCLUSIVE"],
    },
    :predicate => {
      :IRIREF => [:iri],
      :PNAME_LN => [:iri],
      :PNAME_NS => [:iri],
      :RDF_TYPE => [:RDF_TYPE],
    },
    :prefixDecl => {
      "PREFIX" => ["PREFIX", :PNAME_NS, :IRIREF],
    },
    :prefixedName => {
      :PNAME_LN => [:PNAME_LN],
      :PNAME_NS => [:PNAME_NS],
    },
    :productionLabel => {
      "$" => ["$", :_productionLabel_1],
    },
    :_productionLabel_1 => {
      :BLANK_NODE_LABEL => [:blankNode],
      :IRIREF => [:iri],
      :PNAME_LN => [:iri],
      :PNAME_NS => [:iri],
    },
    :rdfLiteral => {
      :STRING_LITERAL1 => [:string, :_rdfLiteral_1],
      :STRING_LITERAL2 => [:string, :_rdfLiteral_1],
      :STRING_LITERAL_LONG1 => [:string, :_rdfLiteral_1],
      :STRING_LITERAL_LONG2 => [:string, :_rdfLiteral_1],
    },
    :_rdfLiteral_1 => {
      "%" => [],
      ")" => [],
      "." => [],
      "//" => [],
      ";" => [],
      :DECIMAL => [],
      :DOUBLE => [],
      :INTEGER => [],
      :IRIREF => [],
      :LANGTAG => [:_rdfLiteral_2],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :STRING_LITERAL1 => [],
      :STRING_LITERAL2 => [],
      :STRING_LITERAL_LONG1 => [],
      :STRING_LITERAL_LONG2 => [],
      "]" => [],
      "^^" => [:_rdfLiteral_2],
      "false" => [],
      "true" => [],
      "|" => [],
      "}" => [],
    },
    :_rdfLiteral_2 => {
      :LANGTAG => [:LANGTAG],
      "^^" => [:_rdfLiteral_3],
    },
    :_rdfLiteral_3 => {
      "^^" => ["^^", :datatype],
    },
    :semanticActions => {
      "%" => [:_semanticActions_1],
      ")" => [],
      ";" => [],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      "start" => [],
      "|" => [],
      "}" => [],
    },
    :_semanticActions_1 => {
      "%" => [:codeDecl, :semanticActions],
    },
    :senseFlags => {
      "!" => [:_senseFlags_1],
      "^" => [:_senseFlags_2],
    },
    :_senseFlags_1 => {
      "!" => ["!", :_senseFlags_3],
    },
    :_senseFlags_2 => {
      "^" => ["^", :_senseFlags_4],
    },
    :_senseFlags_3 => {
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :RDF_TYPE => [],
      "^" => ["^"],
    },
    :_senseFlags_4 => {
      "!" => ["!"],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :RDF_TYPE => [],
    },
    :shape => {
      :BLANK_NODE_LABEL => [:shapeLabel, :_shape_1, :semanticActions],
      :IRIREF => [:shapeLabel, :_shape_1, :semanticActions],
      :PNAME_LN => [:shapeLabel, :_shape_1, :semanticActions],
      :PNAME_NS => [:shapeLabel, :_shape_1, :semanticActions],
    },
    :shapeAtom => {
      "&" => [:_shapeAtom_4],
      "(" => [:_shapeAtom_5],
      "." => ["."],
      "@" => [:_shapeAtom_4],
      :ATPNAME_LN => [:_shapeAtom_4],
      :ATPNAME_NS => [:_shapeAtom_4],
      "BNODE" => [:_shapeAtom_2],
      "CLOSED" => [:_shapeAtom_4],
      "EXTRA" => [:_shapeAtom_4],
      "IRI" => [:_shapeAtom_2],
      :IRIREF => [:_shapeAtom_3],
      "LITERAL" => [:_shapeAtom_1],
      "NONLITERAL" => [:_shapeAtom_2],
      :PNAME_LN => [:_shapeAtom_3],
      :PNAME_NS => [:_shapeAtom_3],
      "[" => [:valueSet],
      "{" => [:_shapeAtom_4],
    },
    :_shapeAtom_1 => {
      "LITERAL" => ["LITERAL", :_shapeAtom_6],
    },
    :_shapeAtom_10 => {
      "LENGTH" => [:stringFacet, :_shapeAtom_8],
      "MAXLENGTH" => [:stringFacet, :_shapeAtom_8],
      "MINLENGTH" => [:stringFacet, :_shapeAtom_8],
      "PATTERN" => [:stringFacet, :_shapeAtom_8],
      "~" => [:stringFacet, :_shapeAtom_8],
    },
    :_shapeAtom_11 => {
      "%" => [],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "AND" => [],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      "FRACTIONDIGITS" => [:_shapeAtom_12],
      :IRIREF => [],
      "LENGTH" => [:_shapeAtom_12],
      "MAXEXCLUSIVE" => [:_shapeAtom_12],
      "MAXINCLUSIVE" => [:_shapeAtom_12],
      "MAXLENGTH" => [:_shapeAtom_12],
      "MINEXCLUSIVE" => [:_shapeAtom_12],
      "MININCLUSIVE" => [:_shapeAtom_12],
      "MINLENGTH" => [:_shapeAtom_12],
      "OR" => [],
      "PATTERN" => [:_shapeAtom_12],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "TOTALDIGITS" => [:_shapeAtom_12],
      "start" => [],
      "|" => [],
      "}" => [],
      "~" => [:_shapeAtom_12],
    },
    :_shapeAtom_12 => {
      "FRACTIONDIGITS" => [:xsFacet, :_shapeAtom_11],
      "LENGTH" => [:xsFacet, :_shapeAtom_11],
      "MAXEXCLUSIVE" => [:xsFacet, :_shapeAtom_11],
      "MAXINCLUSIVE" => [:xsFacet, :_shapeAtom_11],
      "MAXLENGTH" => [:xsFacet, :_shapeAtom_11],
      "MINEXCLUSIVE" => [:xsFacet, :_shapeAtom_11],
      "MININCLUSIVE" => [:xsFacet, :_shapeAtom_11],
      "MINLENGTH" => [:xsFacet, :_shapeAtom_11],
      "PATTERN" => [:xsFacet, :_shapeAtom_11],
      "TOTALDIGITS" => [:xsFacet, :_shapeAtom_11],
      "~" => [:xsFacet, :_shapeAtom_11],
    },
    :_shapeAtom_13 => {
      "%" => [],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "AND" => [],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      :IRIREF => [],
      "LENGTH" => [:_shapeAtom_14],
      "MAXLENGTH" => [:_shapeAtom_14],
      "MINLENGTH" => [:_shapeAtom_14],
      "OR" => [],
      "PATTERN" => [:_shapeAtom_14],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "start" => [],
      "|" => [],
      "}" => [],
      "~" => [:_shapeAtom_14],
    },
    :_shapeAtom_14 => {
      "LENGTH" => [:stringFacet, :_shapeAtom_13],
      "MAXLENGTH" => [:stringFacet, :_shapeAtom_13],
      "MINLENGTH" => [:stringFacet, :_shapeAtom_13],
      "PATTERN" => [:stringFacet, :_shapeAtom_13],
      "~" => [:stringFacet, :_shapeAtom_13],
    },
    :_shapeAtom_2 => {
      "BNODE" => [:nonLiteralKind, :_shapeAtom_8, :_shapeAtom_9],
      "IRI" => [:nonLiteralKind, :_shapeAtom_8, :_shapeAtom_9],
      "NONLITERAL" => [:nonLiteralKind, :_shapeAtom_8, :_shapeAtom_9],
    },
    :_shapeAtom_3 => {
      :IRIREF => [:datatype, :_shapeAtom_11],
      :PNAME_LN => [:datatype, :_shapeAtom_11],
      :PNAME_NS => [:datatype, :_shapeAtom_11],
    },
    :_shapeAtom_4 => {
      "&" => [:shapeOrRef, :_shapeAtom_13],
      "@" => [:shapeOrRef, :_shapeAtom_13],
      :ATPNAME_LN => [:shapeOrRef, :_shapeAtom_13],
      :ATPNAME_NS => [:shapeOrRef, :_shapeAtom_13],
      "CLOSED" => [:shapeOrRef, :_shapeAtom_13],
      "EXTRA" => [:shapeOrRef, :_shapeAtom_13],
      "{" => [:shapeOrRef, :_shapeAtom_13],
    },
    :_shapeAtom_5 => {
      "(" => ["(", :shapeExpression, ")"],
    },
    :_shapeAtom_6 => {
      "%" => [],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "AND" => [],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      "FRACTIONDIGITS" => [:_shapeAtom_7],
      :IRIREF => [],
      "LENGTH" => [:_shapeAtom_7],
      "MAXEXCLUSIVE" => [:_shapeAtom_7],
      "MAXINCLUSIVE" => [:_shapeAtom_7],
      "MAXLENGTH" => [:_shapeAtom_7],
      "MINEXCLUSIVE" => [:_shapeAtom_7],
      "MININCLUSIVE" => [:_shapeAtom_7],
      "MINLENGTH" => [:_shapeAtom_7],
      "OR" => [],
      "PATTERN" => [:_shapeAtom_7],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "TOTALDIGITS" => [:_shapeAtom_7],
      "start" => [],
      "|" => [],
      "}" => [],
      "~" => [:_shapeAtom_7],
    },
    :_shapeAtom_7 => {
      "FRACTIONDIGITS" => [:xsFacet, :_shapeAtom_6],
      "LENGTH" => [:xsFacet, :_shapeAtom_6],
      "MAXEXCLUSIVE" => [:xsFacet, :_shapeAtom_6],
      "MAXINCLUSIVE" => [:xsFacet, :_shapeAtom_6],
      "MAXLENGTH" => [:xsFacet, :_shapeAtom_6],
      "MINEXCLUSIVE" => [:xsFacet, :_shapeAtom_6],
      "MININCLUSIVE" => [:xsFacet, :_shapeAtom_6],
      "MINLENGTH" => [:xsFacet, :_shapeAtom_6],
      "PATTERN" => [:xsFacet, :_shapeAtom_6],
      "TOTALDIGITS" => [:xsFacet, :_shapeAtom_6],
      "~" => [:xsFacet, :_shapeAtom_6],
    },
    :_shapeAtom_8 => {
      "%" => [],
      "&" => [],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "@" => [],
      "AND" => [],
      :ATPNAME_LN => [],
      :ATPNAME_NS => [],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      "CLOSED" => [],
      "EXTRA" => [],
      :IRIREF => [],
      "LENGTH" => [:_shapeAtom_10],
      "MAXLENGTH" => [:_shapeAtom_10],
      "MINLENGTH" => [:_shapeAtom_10],
      "OR" => [],
      "PATTERN" => [:_shapeAtom_10],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "start" => [],
      "{" => [],
      "|" => [],
      "}" => [],
      "~" => [:_shapeAtom_10],
    },
    :_shapeAtom_9 => {
      "%" => [],
      "&" => [:shapeOrRef],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "@" => [:shapeOrRef],
      "AND" => [],
      :ATPNAME_LN => [:shapeOrRef],
      :ATPNAME_NS => [:shapeOrRef],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      "CLOSED" => [:shapeOrRef],
      "EXTRA" => [:shapeOrRef],
      :IRIREF => [],
      "OR" => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "start" => [],
      "{" => [:shapeOrRef],
      "|" => [],
      "}" => [],
    },
    :shapeConjunction => {
      "!" => [:negShapeAtom, :_shapeConjunction_1],
      "&" => [:negShapeAtom, :_shapeConjunction_1],
      "(" => [:negShapeAtom, :_shapeConjunction_1],
      "." => [:negShapeAtom, :_shapeConjunction_1],
      "@" => [:negShapeAtom, :_shapeConjunction_1],
      :ATPNAME_LN => [:negShapeAtom, :_shapeConjunction_1],
      :ATPNAME_NS => [:negShapeAtom, :_shapeConjunction_1],
      "BNODE" => [:negShapeAtom, :_shapeConjunction_1],
      "CLOSED" => [:negShapeAtom, :_shapeConjunction_1],
      "EXTRA" => [:negShapeAtom, :_shapeConjunction_1],
      "IRI" => [:negShapeAtom, :_shapeConjunction_1],
      :IRIREF => [:negShapeAtom, :_shapeConjunction_1],
      "LITERAL" => [:negShapeAtom, :_shapeConjunction_1],
      "NONLITERAL" => [:negShapeAtom, :_shapeConjunction_1],
      "NOT" => [:negShapeAtom, :_shapeConjunction_1],
      :PNAME_LN => [:negShapeAtom, :_shapeConjunction_1],
      :PNAME_NS => [:negShapeAtom, :_shapeConjunction_1],
      "[" => [:negShapeAtom, :_shapeConjunction_1],
      "{" => [:negShapeAtom, :_shapeConjunction_1],
    },
    :_shapeConjunction_1 => {
      "%" => [],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "AND" => [:_shapeConjunction_3],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      :IRIREF => [],
      "OR" => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "start" => [],
      "|" => [],
      "}" => [],
    },
    :_shapeConjunction_2 => {
      "AND" => ["AND", :negShapeAtom],
    },
    :_shapeConjunction_3 => {
      "AND" => [:_shapeConjunction_2, :_shapeConjunction_1],
    },
    :shapeDefinition => {
      "&" => [:_shapeDefinition_1, "{", :_shapeDefinition_2, "}"],
      "CLOSED" => [:_shapeDefinition_1, "{", :_shapeDefinition_2, "}"],
      "EXTRA" => [:_shapeDefinition_1, "{", :_shapeDefinition_2, "}"],
      "{" => [:_shapeDefinition_1, "{", :_shapeDefinition_2, "}"],
    },
    :_shapeDefinition_1 => {
      "&" => [:_shapeDefinition_4],
      "CLOSED" => [:_shapeDefinition_4],
      "EXTRA" => [:_shapeDefinition_4],
      "{" => [],
    },
    :_shapeDefinition_2 => {
      "!" => [:someOfShape],
      "$" => [:someOfShape],
      "&" => [:someOfShape],
      "(" => [:someOfShape],
      :IRIREF => [:someOfShape],
      :PNAME_LN => [:someOfShape],
      :PNAME_NS => [:someOfShape],
      :RDF_TYPE => [:someOfShape],
      "^" => [:someOfShape],
      "}" => [],
    },
    :_shapeDefinition_3 => {
      "&" => [:includeSet],
      "CLOSED" => ["CLOSED"],
      "EXTRA" => [:inclPropertySet],
    },
    :_shapeDefinition_4 => {
      "&" => [:_shapeDefinition_3, :_shapeDefinition_1],
      "CLOSED" => [:_shapeDefinition_3, :_shapeDefinition_1],
      "EXTRA" => [:_shapeDefinition_3, :_shapeDefinition_1],
    },
    :shapeDisjunction => {
      "!" => [:shapeConjunction, :_shapeDisjunction_1],
      "&" => [:shapeConjunction, :_shapeDisjunction_1],
      "(" => [:shapeConjunction, :_shapeDisjunction_1],
      "." => [:shapeConjunction, :_shapeDisjunction_1],
      "@" => [:shapeConjunction, :_shapeDisjunction_1],
      :ATPNAME_LN => [:shapeConjunction, :_shapeDisjunction_1],
      :ATPNAME_NS => [:shapeConjunction, :_shapeDisjunction_1],
      "BNODE" => [:shapeConjunction, :_shapeDisjunction_1],
      "CLOSED" => [:shapeConjunction, :_shapeDisjunction_1],
      "EXTRA" => [:shapeConjunction, :_shapeDisjunction_1],
      "IRI" => [:shapeConjunction, :_shapeDisjunction_1],
      :IRIREF => [:shapeConjunction, :_shapeDisjunction_1],
      "LITERAL" => [:shapeConjunction, :_shapeDisjunction_1],
      "NONLITERAL" => [:shapeConjunction, :_shapeDisjunction_1],
      "NOT" => [:shapeConjunction, :_shapeDisjunction_1],
      :PNAME_LN => [:shapeConjunction, :_shapeDisjunction_1],
      :PNAME_NS => [:shapeConjunction, :_shapeDisjunction_1],
      "[" => [:shapeConjunction, :_shapeDisjunction_1],
      "{" => [:shapeConjunction, :_shapeDisjunction_1],
    },
    :_shapeDisjunction_1 => {
      "%" => [],
      ")" => [],
      "*" => [],
      "+" => [],
      "//" => [],
      ";" => [],
      "?" => [],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      :IRIREF => [],
      "OR" => [:_shapeDisjunction_3],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      :REPEAT_RANGE => [],
      "start" => [],
      "|" => [],
      "}" => [],
    },
    :_shapeDisjunction_2 => {
      "OR" => ["OR", :shapeConjunction],
    },
    :_shapeDisjunction_3 => {
      "OR" => [:_shapeDisjunction_2, :_shapeDisjunction_1],
    },
    :shapeExpression => {
      "!" => [:shapeDisjunction],
      "&" => [:shapeDisjunction],
      "(" => [:shapeDisjunction],
      "." => [:shapeDisjunction],
      "@" => [:shapeDisjunction],
      :ATPNAME_LN => [:shapeDisjunction],
      :ATPNAME_NS => [:shapeDisjunction],
      "BNODE" => [:shapeDisjunction],
      "CLOSED" => [:shapeDisjunction],
      "EXTRA" => [:shapeDisjunction],
      "IRI" => [:shapeDisjunction],
      :IRIREF => [:shapeDisjunction],
      "LITERAL" => [:shapeDisjunction],
      "NONLITERAL" => [:shapeDisjunction],
      "NOT" => [:shapeDisjunction],
      :PNAME_LN => [:shapeDisjunction],
      :PNAME_NS => [:shapeDisjunction],
      "[" => [:shapeDisjunction],
      "{" => [:shapeDisjunction],
    },
    :shapeLabel => {
      :BLANK_NODE_LABEL => [:blankNode],
      :IRIREF => [:iri],
      :PNAME_LN => [:iri],
      :PNAME_NS => [:iri],
    },
    :shapeOrRef => {
      "&" => [:shapeDefinition],
      "@" => [:_shapeOrRef_1],
      :ATPNAME_LN => [:ATPNAME_LN],
      :ATPNAME_NS => [:ATPNAME_NS],
      "CLOSED" => [:shapeDefinition],
      "EXTRA" => [:shapeDefinition],
      "{" => [:shapeDefinition],
    },
    :_shapeOrRef_1 => {
      "@" => ["@", :shapeLabel],
    },
    :_shape_1 => {
      "!" => [:_shape_2],
      "&" => [:_shape_2],
      "(" => [:_shape_2],
      "." => [:_shape_2],
      "@" => [:_shape_2],
      :ATPNAME_LN => [:_shape_2],
      :ATPNAME_NS => [:_shape_2],
      "BNODE" => [:_shape_2],
      "CLOSED" => [:_shape_2],
      "EXTERNAL" => ["EXTERNAL"],
      "EXTRA" => [:_shape_2],
      "IRI" => [:_shape_2],
      :IRIREF => [:_shape_2],
      "LENGTH" => [:_shape_2],
      "LITERAL" => [:_shape_2],
      "MAXLENGTH" => [:_shape_2],
      "MINLENGTH" => [:_shape_2],
      "NONLITERAL" => [:_shape_2],
      "NOT" => [:_shape_2],
      "PATTERN" => [:_shape_2],
      :PNAME_LN => [:_shape_2],
      :PNAME_NS => [:_shape_2],
      "[" => [:_shape_2],
      "{" => [:_shape_2],
      "~" => [:_shape_2],
    },
    :_shape_2 => {
      "!" => [:_shape_3, :shapeExpression],
      "&" => [:_shape_3, :shapeExpression],
      "(" => [:_shape_3, :shapeExpression],
      "." => [:_shape_3, :shapeExpression],
      "@" => [:_shape_3, :shapeExpression],
      :ATPNAME_LN => [:_shape_3, :shapeExpression],
      :ATPNAME_NS => [:_shape_3, :shapeExpression],
      "BNODE" => [:_shape_3, :shapeExpression],
      "CLOSED" => [:_shape_3, :shapeExpression],
      "EXTRA" => [:_shape_3, :shapeExpression],
      "IRI" => [:_shape_3, :shapeExpression],
      :IRIREF => [:_shape_3, :shapeExpression],
      "LENGTH" => [:_shape_3, :shapeExpression],
      "LITERAL" => [:_shape_3, :shapeExpression],
      "MAXLENGTH" => [:_shape_3, :shapeExpression],
      "MINLENGTH" => [:_shape_3, :shapeExpression],
      "NONLITERAL" => [:_shape_3, :shapeExpression],
      "NOT" => [:_shape_3, :shapeExpression],
      "PATTERN" => [:_shape_3, :shapeExpression],
      :PNAME_LN => [:_shape_3, :shapeExpression],
      :PNAME_NS => [:_shape_3, :shapeExpression],
      "[" => [:_shape_3, :shapeExpression],
      "{" => [:_shape_3, :shapeExpression],
      "~" => [:_shape_3, :shapeExpression],
    },
    :_shape_3 => {
      "!" => [],
      "&" => [],
      "(" => [],
      "." => [],
      "@" => [],
      :ATPNAME_LN => [],
      :ATPNAME_NS => [],
      "BNODE" => [],
      "CLOSED" => [],
      "EXTRA" => [],
      "IRI" => [],
      :IRIREF => [],
      "LENGTH" => [:_shape_4],
      "LITERAL" => [],
      "MAXLENGTH" => [:_shape_4],
      "MINLENGTH" => [:_shape_4],
      "NONLITERAL" => [],
      "NOT" => [],
      "PATTERN" => [:_shape_4],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "[" => [],
      "{" => [],
      "~" => [:_shape_4],
    },
    :_shape_4 => {
      "LENGTH" => [:stringFacet, :_shape_3],
      "MAXLENGTH" => [:stringFacet, :_shape_3],
      "MINLENGTH" => [:stringFacet, :_shape_3],
      "PATTERN" => [:stringFacet, :_shape_3],
      "~" => [:stringFacet, :_shape_3],
    },
    :shexDoc => {
      "%" => [:_shexDoc_1, :_shexDoc_2],
      "BASE" => [:_shexDoc_1, :_shexDoc_2],
      :BLANK_NODE_LABEL => [:_shexDoc_1, :_shexDoc_2],
      :IRIREF => [:_shexDoc_1, :_shexDoc_2],
      :PNAME_LN => [:_shexDoc_1, :_shexDoc_2],
      :PNAME_NS => [:_shexDoc_1, :_shexDoc_2],
      "PREFIX" => [:_shexDoc_1, :_shexDoc_2],
      "start" => [:_shexDoc_1, :_shexDoc_2],
    },
    :_shexDoc_1 => {
      "%" => [],
      "BASE" => [:_shexDoc_3],
      :BLANK_NODE_LABEL => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [:_shexDoc_3],
      "start" => [],
    },
    :_shexDoc_2 => {
      "%" => [:_shexDoc_4],
      :BLANK_NODE_LABEL => [:_shexDoc_4],
      :IRIREF => [:_shexDoc_4],
      :PNAME_LN => [:_shexDoc_4],
      :PNAME_NS => [:_shexDoc_4],
      "start" => [:_shexDoc_4],
    },
    :_shexDoc_3 => {
      "BASE" => [:directive, :_shexDoc_1],
      "PREFIX" => [:directive, :_shexDoc_1],
    },
    :_shexDoc_4 => {
      "%" => [:_shexDoc_5, :_shexDoc_6],
      :BLANK_NODE_LABEL => [:_shexDoc_5, :_shexDoc_6],
      :IRIREF => [:_shexDoc_5, :_shexDoc_6],
      :PNAME_LN => [:_shexDoc_5, :_shexDoc_6],
      :PNAME_NS => [:_shexDoc_5, :_shexDoc_6],
      "start" => [:_shexDoc_5, :_shexDoc_6],
    },
    :_shexDoc_5 => {
      "%" => [:startActions],
      :BLANK_NODE_LABEL => [:notStartAction],
      :IRIREF => [:notStartAction],
      :PNAME_LN => [:notStartAction],
      :PNAME_NS => [:notStartAction],
      "start" => [:notStartAction],
    },
    :_shexDoc_6 => {
      "BASE" => [:_shexDoc_7],
      :BLANK_NODE_LABEL => [:_shexDoc_7],
      :IRIREF => [:_shexDoc_7],
      :PNAME_LN => [:_shexDoc_7],
      :PNAME_NS => [:_shexDoc_7],
      "PREFIX" => [:_shexDoc_7],
      "start" => [:_shexDoc_7],
    },
    :_shexDoc_7 => {
      "BASE" => [:statement, :_shexDoc_6],
      :BLANK_NODE_LABEL => [:statement, :_shexDoc_6],
      :IRIREF => [:statement, :_shexDoc_6],
      :PNAME_LN => [:statement, :_shexDoc_6],
      :PNAME_NS => [:statement, :_shexDoc_6],
      "PREFIX" => [:statement, :_shexDoc_6],
      "start" => [:statement, :_shexDoc_6],
    },
    :someOfShape => {
      "!" => [:groupShape, :_someOfShape_1],
      "$" => [:groupShape, :_someOfShape_1],
      "&" => [:groupShape, :_someOfShape_1],
      "(" => [:groupShape, :_someOfShape_1],
      :IRIREF => [:groupShape, :_someOfShape_1],
      :PNAME_LN => [:groupShape, :_someOfShape_1],
      :PNAME_NS => [:groupShape, :_someOfShape_1],
      :RDF_TYPE => [:groupShape, :_someOfShape_1],
      "^" => [:groupShape, :_someOfShape_1],
    },
    :_someOfShape_1 => {
      "|" => [:_someOfShape_3],
      "}" => [],
    },
    :_someOfShape_2 => {
      "|" => ["|", :groupShape],
    },
    :_someOfShape_3 => {
      "|" => [:_someOfShape_2, :_someOfShape_1],
    },
    :start => {
      "start" => ["start", "=", :shapeExpression, :semanticActions],
    },
    :startActions => {
      "%" => [:codeDecl, :_startActions_1],
    },
    :_startActions_1 => {
      "%" => [:_startActions_2],
      "BASE" => [],
      :BLANK_NODE_LABEL => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      "PREFIX" => [],
      "start" => [],
    },
    :_startActions_2 => {
      "%" => [:codeDecl, :_startActions_1],
    },
    :statement => {
      "BASE" => [:directive],
      :BLANK_NODE_LABEL => [:notStartAction],
      :IRIREF => [:notStartAction],
      :PNAME_LN => [:notStartAction],
      :PNAME_NS => [:notStartAction],
      "PREFIX" => [:directive],
      "start" => [:notStartAction],
    },
    :string => {
      :STRING_LITERAL1 => [:STRING_LITERAL1],
      :STRING_LITERAL2 => [:STRING_LITERAL2],
      :STRING_LITERAL_LONG1 => [:STRING_LITERAL_LONG1],
      :STRING_LITERAL_LONG2 => [:STRING_LITERAL_LONG2],
    },
    :stringFacet => {
      "LENGTH" => [:_stringFacet_1],
      "MAXLENGTH" => [:_stringFacet_1],
      "MINLENGTH" => [:_stringFacet_1],
      "PATTERN" => [:_stringFacet_2],
      "~" => [:_stringFacet_3],
    },
    :_stringFacet_1 => {
      "LENGTH" => [:stringLength, :INTEGER],
      "MAXLENGTH" => [:stringLength, :INTEGER],
      "MINLENGTH" => [:stringLength, :INTEGER],
    },
    :_stringFacet_2 => {
      "PATTERN" => ["PATTERN", :string],
    },
    :_stringFacet_3 => {
      "~" => ["~", :string],
    },
    :stringLength => {
      "LENGTH" => ["LENGTH"],
      "MAXLENGTH" => ["MAXLENGTH"],
      "MINLENGTH" => ["MINLENGTH"],
    },
    :tripleConstraint => {
      "!" => [:_tripleConstraint_1, :predicate, :shapeExpression, :_tripleConstraint_2, :_tripleConstraint_3, :semanticActions],
      :IRIREF => [:_tripleConstraint_1, :predicate, :shapeExpression, :_tripleConstraint_2, :_tripleConstraint_3, :semanticActions],
      :PNAME_LN => [:_tripleConstraint_1, :predicate, :shapeExpression, :_tripleConstraint_2, :_tripleConstraint_3, :semanticActions],
      :PNAME_NS => [:_tripleConstraint_1, :predicate, :shapeExpression, :_tripleConstraint_2, :_tripleConstraint_3, :semanticActions],
      :RDF_TYPE => [:_tripleConstraint_1, :predicate, :shapeExpression, :_tripleConstraint_2, :_tripleConstraint_3, :semanticActions],
      "^" => [:_tripleConstraint_1, :predicate, :shapeExpression, :_tripleConstraint_2, :_tripleConstraint_3, :semanticActions],
    },
    :_tripleConstraint_1 => {
      "!" => [:senseFlags],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :RDF_TYPE => [],
      "^" => [:senseFlags],
    },
    :_tripleConstraint_2 => {
      "%" => [],
      ")" => [],
      "*" => [:cardinality],
      "+" => [:cardinality],
      "//" => [],
      ";" => [],
      "?" => [:cardinality],
      :REPEAT_RANGE => [:cardinality],
      "|" => [],
      "}" => [],
    },
    :_tripleConstraint_3 => {
      "%" => [],
      ")" => [],
      "//" => [:_tripleConstraint_4],
      ";" => [],
      "|" => [],
      "}" => [],
    },
    :_tripleConstraint_4 => {
      "//" => [:annotation, :_tripleConstraint_3],
    },
    :unaryShape => {
      "!" => [:_unaryShape_1],
      "$" => [:_unaryShape_1],
      "&" => [:include],
      "(" => [:_unaryShape_1],
      :IRIREF => [:_unaryShape_1],
      :PNAME_LN => [:_unaryShape_1],
      :PNAME_NS => [:_unaryShape_1],
      :RDF_TYPE => [:_unaryShape_1],
      "^" => [:_unaryShape_1],
    },
    :_unaryShape_1 => {
      "!" => [:_unaryShape_2, :_unaryShape_3],
      "$" => [:_unaryShape_2, :_unaryShape_3],
      "(" => [:_unaryShape_2, :_unaryShape_3],
      :IRIREF => [:_unaryShape_2, :_unaryShape_3],
      :PNAME_LN => [:_unaryShape_2, :_unaryShape_3],
      :PNAME_NS => [:_unaryShape_2, :_unaryShape_3],
      :RDF_TYPE => [:_unaryShape_2, :_unaryShape_3],
      "^" => [:_unaryShape_2, :_unaryShape_3],
    },
    :_unaryShape_2 => {
      "!" => [],
      "$" => [:productionLabel],
      "(" => [],
      :IRIREF => [],
      :PNAME_LN => [],
      :PNAME_NS => [],
      :RDF_TYPE => [],
      "^" => [],
    },
    :_unaryShape_3 => {
      "!" => [:tripleConstraint],
      "(" => [:encapsulatedShape],
      :IRIREF => [:tripleConstraint],
      :PNAME_LN => [:tripleConstraint],
      :PNAME_NS => [:tripleConstraint],
      :RDF_TYPE => [:tripleConstraint],
      "^" => [:tripleConstraint],
    },
    :value => {
      "." => [:iriRange],
      :DECIMAL => [:literal],
      :DOUBLE => [:literal],
      :INTEGER => [:literal],
      :IRIREF => [:iriRange],
      :PNAME_LN => [:iriRange],
      :PNAME_NS => [:iriRange],
      :STRING_LITERAL1 => [:literal],
      :STRING_LITERAL2 => [:literal],
      :STRING_LITERAL_LONG1 => [:literal],
      :STRING_LITERAL_LONG2 => [:literal],
      "false" => [:literal],
      "true" => [:literal],
    },
    :valueSet => {
      "[" => ["[", :_valueSet_1, "]"],
    },
    :_valueSet_1 => {
      "." => [:_valueSet_2],
      :DECIMAL => [:_valueSet_2],
      :DOUBLE => [:_valueSet_2],
      :INTEGER => [:_valueSet_2],
      :IRIREF => [:_valueSet_2],
      :PNAME_LN => [:_valueSet_2],
      :PNAME_NS => [:_valueSet_2],
      :STRING_LITERAL1 => [:_valueSet_2],
      :STRING_LITERAL2 => [:_valueSet_2],
      :STRING_LITERAL_LONG1 => [:_valueSet_2],
      :STRING_LITERAL_LONG2 => [:_valueSet_2],
      "]" => [],
      "false" => [:_valueSet_2],
      "true" => [:_valueSet_2],
    },
    :_valueSet_2 => {
      "." => [:value, :_valueSet_1],
      :DECIMAL => [:value, :_valueSet_1],
      :DOUBLE => [:value, :_valueSet_1],
      :INTEGER => [:value, :_valueSet_1],
      :IRIREF => [:value, :_valueSet_1],
      :PNAME_LN => [:value, :_valueSet_1],
      :PNAME_NS => [:value, :_valueSet_1],
      :STRING_LITERAL1 => [:value, :_valueSet_1],
      :STRING_LITERAL2 => [:value, :_valueSet_1],
      :STRING_LITERAL_LONG1 => [:value, :_valueSet_1],
      :STRING_LITERAL_LONG2 => [:value, :_valueSet_1],
      "false" => [:value, :_valueSet_1],
      "true" => [:value, :_valueSet_1],
    },
    :xsFacet => {
      "FRACTIONDIGITS" => [:numericFacet],
      "LENGTH" => [:stringFacet],
      "MAXEXCLUSIVE" => [:numericFacet],
      "MAXINCLUSIVE" => [:numericFacet],
      "MAXLENGTH" => [:stringFacet],
      "MINEXCLUSIVE" => [:numericFacet],
      "MININCLUSIVE" => [:numericFacet],
      "MINLENGTH" => [:stringFacet],
      "PATTERN" => [:stringFacet],
      "TOTALDIGITS" => [:numericFacet],
      "~" => [:stringFacet],
    },
  }.freeze
  TERMINALS = [
    "!",
    "$",
    "%",
    "&",
    "(",
    ")",
    "*",
    "+",
    "-",
    ".",
    "//",
    ";",
    "=",
    "?",
    "@",
    "AND",
    :ATPNAME_LN,
    :ATPNAME_NS,
    "BASE",
    :BLANK_NODE_LABEL,
    "BNODE",
    "CLOSED",
    :CODE,
    :DECIMAL,
    :DOUBLE,
    "EXTERNAL",
    "EXTRA",
    "FRACTIONDIGITS",
    :INTEGER,
    "IRI",
    :IRIREF,
    :LANGTAG,
    "LENGTH",
    "LITERAL",
    "MAXEXCLUSIVE",
    "MAXINCLUSIVE",
    "MAXLENGTH",
    "MINEXCLUSIVE",
    "MININCLUSIVE",
    "MINLENGTH",
    "NONLITERAL",
    "NOT",
    "OR",
    "PATTERN",
    :PNAME_LN,
    :PNAME_NS,
    "PREFIX",
    :RDF_TYPE,
    :REPEAT_RANGE,
    :STRING_LITERAL1,
    :STRING_LITERAL2,
    :STRING_LITERAL_LONG1,
    :STRING_LITERAL_LONG2,
    "TOTALDIGITS",
    "[",
    "]",
    "^",
    "^^",
    "false",
    "start",
    "true",
    "{",
    "|",
    "}",
    "~"
  ].freeze
  FIRST = {
    :annotation => [
      "//"],
    :_annotation_1 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS,
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :_annotation_2 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_annotation_3 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS,
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :baseDecl => [
      "BASE"],
    :_baseDecl_1 => [
      :IRIREF],
    :blankNode => [
      :BLANK_NODE_LABEL],
    :booleanLiteral => [
      "true",
      "false"],
    :cardinality => [
      "*",
      "+",
      "?",
      :REPEAT_RANGE],
    :codeDecl => [
      "%"],
    :_codeDecl_1 => [
      :CODE,
      "%"],
    :_codeDecl_2 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_codeDecl_3 => [
      :CODE,
      "%"],
    :datatype => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :directive => [
      "BASE",
      "PREFIX"],
    :_empty => [
      :_eps],
    :encapsulatedShape => [
      "("],
    :_encapsulatedShape_1 => [
      :_eps,
      "*",
      "+",
      "?",
      :REPEAT_RANGE],
    :_encapsulatedShape_2 => [
      :_eps,
      "//"],
    :_encapsulatedShape_3 => [
      "//"],
    :_encapsulatedShape_4 => [
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_encapsulatedShape_5 => [
      :_eps,
      "//"],
    :_encapsulatedShape_6 => [
      ")"],
    :_encapsulatedShape_7 => [
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "%",
      :_eps,
      "//"],
    :_encapsulatedShape_8 => [
      "%",
      :_eps,
      "//"],
    :exclusion => [
      "-"],
    :_exclusion_1 => [
      "~",
      :_eps],
    :_exclusion_2 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_exclusion_3 => [
      "~",
      :_eps],
    :groupShape => [
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_groupShape_1 => [
      :_eps,
      ";"],
    :_groupShape_2 => [
      ";"],
    :_groupShape_3 => [
      ";"],
    :_groupShape_4 => [
      :_eps,
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_groupShape_5 => [
      :_eps,
      ";"],
    :_groupShape_6 => [
      :_eps,
      ";"],
    :_groupShape_7 => [
      :_eps,
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :inclPropertySet => [
      "EXTRA"],
    :_inclPropertySet_1 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_inclPropertySet_2 => [
      :_eps,
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_inclPropertySet_3 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_inclPropertySet_4 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_inclPropertySet_5 => [
      :_eps,
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_inclPropertySet_6 => [
      :_eps,
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :include => [
      "&"],
    :includeSet => [
      "&"],
    :_includeSet_1 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_includeSet_2 => [
      :_eps,
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_includeSet_3 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_includeSet_4 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_includeSet_5 => [
      :_eps,
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_includeSet_6 => [
      :_eps,
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_include_1 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :iri => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :iriRange => [
      ".",
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_1 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_10 => [
      "~",
      :_eps],
    :_iriRange_11 => [
      :_eps,
      "-"],
    :_iriRange_12 => [
      :_eps,
      "-"],
    :_iriRange_13 => [
      "-"],
    :_iriRange_14 => [
      :_eps,
      "-"],
    :_iriRange_15 => [
      :_eps,
      "-"],
    :_iriRange_2 => [
      "."],
    :_iriRange_3 => [
      :_eps,
      "~"],
    :_iriRange_4 => [
      "~"],
    :_iriRange_5 => [
      :_eps,
      "-"],
    :_iriRange_6 => [
      "-"],
    :_iriRange_7 => [
      "-"],
    :_iriRange_8 => [
      :_eps,
      "-"],
    :_iriRange_9 => [
      "-"],
    :literal => [
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :negShapeAtom => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_negShapeAtom_1 => [
      :_eps,
      "NOT",
      "!"],
    :_negShapeAtom_2 => [
      "NOT",
      "!"],
    :_negShapeAtom_3 => [
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :nonLiteralKind => [
      "IRI",
      "BNODE",
      "NONLITERAL"],
    :notStartAction => [
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :numericFacet => [
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_numericFacet_1 => [
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE"],
    :_numericFacet_2 => [
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_numericFacet_3 => [
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :_numericFacet_4 => [
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :_numericFacet_5 => [
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :_numericFacet_6 => [
      :INTEGER],
    :numericLength => [
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :numericLiteral => [
      :INTEGER,
      :DECIMAL,
      :DOUBLE],
    :numericRange => [
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE"],
    :predicate => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :prefixDecl => [
      "PREFIX"],
    :_prefixDecl_1 => [
      :PNAME_NS],
    :prefixedName => [
      :PNAME_LN,
      :PNAME_NS],
    :productionLabel => [
      "$"],
    :_productionLabel_1 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_productionLabel_2 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :rdfLiteral => [
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :_rdfLiteral_1 => [
      :_eps,
      :LANGTAG,
      "^^"],
    :_rdfLiteral_2 => [
      :LANGTAG,
      "^^"],
    :_rdfLiteral_3 => [
      "^^"],
    :_rdfLiteral_4 => [
      :LANGTAG,
      :_eps,
      "^^"],
    :_rdfLiteral_5 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :semanticActions => [
      :_eps,
      "%"],
    :_semanticActions_1 => [
      "%"],
    :_semanticActions_2 => [
      "%",
      :_eps],
    :senseFlags => [
      "!",
      "^"],
    :_senseFlags_1 => [
      "!"],
    :_senseFlags_2 => [
      "^"],
    :_senseFlags_3 => [
      "^",
      :_eps],
    :_senseFlags_4 => [
      "!",
      :_eps],
    :_senseFlags_5 => [
      "^",
      :_eps],
    :_senseFlags_6 => [
      "!",
      :_eps],
    :shape => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeAtom => [
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeAtom_1 => [
      "LITERAL"],
    :_shapeAtom_10 => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_11 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_12 => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_13 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_14 => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_15 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_16 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_17 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      :_eps,
      "PATTERN",
      "~",
      "@",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeAtom_18 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_19 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_2 => [
      "IRI",
      "BNODE",
      "NONLITERAL"],
    :_shapeAtom_20 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_21 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_22 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_23 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeAtom_24 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      :_eps,
      "@",
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeAtom_25 => [
      ")"],
    :_shapeAtom_3 => [
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_4 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@",
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeAtom_5 => [
      "("],
    :_shapeAtom_6 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_7 => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
    :_shapeAtom_8 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shapeAtom_9 => [
      :_eps,
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@",
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :shapeConjunction => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeConjunction_1 => [
      :_eps,
      "AND"],
    :_shapeConjunction_2 => [
      "AND"],
    :_shapeConjunction_3 => [
      "AND"],
    :_shapeConjunction_4 => [
      :_eps,
      "AND"],
    :_shapeConjunction_5 => [
      :_eps,
      "AND"],
    :_shapeConjunction_6 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :shapeDefinition => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDefinition_1 => [
      :_eps,
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDefinition_2 => [
      :_eps,
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDefinition_3 => [
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDefinition_4 => [
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDefinition_5 => [
      "{"],
    :_shapeDefinition_6 => [
      :_eps,
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDefinition_7 => [
      "}",
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDefinition_8 => [
      "}"],
    :shapeDisjunction => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDisjunction_1 => [
      :_eps,
      "OR"],
    :_shapeDisjunction_2 => [
      "OR"],
    :_shapeDisjunction_3 => [
      "OR"],
    :_shapeDisjunction_4 => [
      :_eps,
      "OR"],
    :_shapeDisjunction_5 => [
      :_eps,
      "OR"],
    :_shapeDisjunction_6 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :shapeExpression => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :shapeLabel => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeOrRef => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@",
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeOrRef_1 => [
      "@"],
    :_shapeOrRef_2 => [
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shape_1 => [
      "EXTERNAL",
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shape_2 => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shape_3 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shape_4 => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_shape_5 => [
      "EXTERNAL",
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shape_6 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shape_7 => [
      :_eps,
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :shexDoc => [
      :_eps,
      "BASE",
      "PREFIX",
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_1 => [
      :_eps,
      "BASE",
      "PREFIX"],
    :_shexDoc_10 => [
      :_eps,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_11 => [
      :_eps,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_2 => [
      :_eps,
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_3 => [
      "BASE",
      "PREFIX"],
    :_shexDoc_4 => [
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_5 => [
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_6 => [
      :_eps,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_7 => [
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_8 => [
      :_eps,
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_9 => [
      :_eps,
      "BASE",
      "PREFIX"],
    :someOfShape => [
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_someOfShape_1 => [
      :_eps,
      "|"],
    :_someOfShape_2 => [
      "|"],
    :_someOfShape_3 => [
      "|"],
    :_someOfShape_4 => [
      :_eps,
      "|"],
    :_someOfShape_5 => [
      :_eps,
      "|"],
    :_someOfShape_6 => [
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :start => [
      "start"],
    :startActions => [
      "%"],
    :_startActions_1 => [
      :_eps,
      "%"],
    :_startActions_2 => [
      "%"],
    :_startActions_3 => [
      "%",
      :_eps],
    :_startActions_4 => [
      "%",
      :_eps],
    :_start_1 => [
      "="],
    :_start_2 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :statement => [
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :string => [
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :stringFacet => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_stringFacet_1 => [
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :_stringFacet_2 => [
      "PATTERN"],
    :_stringFacet_3 => [
      "~"],
    :_stringFacet_4 => [
      :INTEGER],
    :_stringFacet_5 => [
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :_stringFacet_6 => [
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :stringLength => [
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH"],
    :tripleConstraint => [
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_tripleConstraint_1 => [
      :_eps,
      "!",
      "^"],
    :_tripleConstraint_2 => [
      :_eps,
      "*",
      "+",
      "?",
      :REPEAT_RANGE],
    :_tripleConstraint_3 => [
      :_eps,
      "//"],
    :_tripleConstraint_4 => [
      "//"],
    :_tripleConstraint_5 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_tripleConstraint_6 => [
      :_eps,
      "//"],
    :_tripleConstraint_7 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_tripleConstraint_8 => [
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "%",
      :_eps,
      "//"],
    :_tripleConstraint_9 => [
      "%",
      :_eps,
      "//"],
    :unaryShape => [
      "&",
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_unaryShape_1 => [
      "$",
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_unaryShape_2 => [
      :_eps,
      "$"],
    :_unaryShape_3 => [
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_unaryShape_4 => [
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :value => [
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :valueSet => [
      "["],
    :_valueSet_1 => [
      :_eps,
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_valueSet_2 => [
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_valueSet_3 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_valueSet_4 => [
      :_eps,
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_valueSet_5 => [
      "]"],
    :xsFacet => [
      "PATTERN",
      "~",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS"],
  }.freeze
  FOLLOW = {
    :annotation => [
      "//",
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_annotation_1 => [
      "//",
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_annotation_2 => [
      "//",
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_annotation_3 => [
      "//",
      "%",
      ")",
      "}",
      ";",
      "|"],
    :baseDecl => [
      :_eof,
      "BASE",
      "PREFIX",
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_baseDecl_1 => [
      :_eof,
      "BASE",
      "PREFIX",
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :blankNode => [
      "EXTERNAL",
      ")",
      "}",
      "{",
      "(",
      ";",
      "|",
      :IRIREF,
      :BLANK_NODE_LABEL,
      "CLOSED",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      :PNAME_LN,
      :PNAME_NS,
      "&",
      "EXTRA",
      :RDF_TYPE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "!",
      "^",
      "//",
      "BASE",
      "PREFIX",
      "start",
      "NOT",
      ".",
      "LITERAL",
      "[",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@"],
    :booleanLiteral => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :cardinality => [
      "%",
      "//",
      ")",
      "}",
      ";",
      "|"],
    :codeDecl => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      ")",
      "}",
      ";",
      "|",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_codeDecl_1 => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      ")",
      "}",
      ";",
      "|",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_codeDecl_2 => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      ")",
      "}",
      ";",
      "|",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_codeDecl_3 => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      ")",
      "}",
      ";",
      "|",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :datatype => [
      ")",
      "]",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "PATTERN",
      "~",
      "}",
      "//",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      ";",
      "|",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :directive => [
      :_eof,
      "BASE",
      "PREFIX",
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :encapsulatedShape => [
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_1 => [
      "%",
      "//",
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_2 => [
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_3 => [
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_4 => [
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_5 => [
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_6 => [
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_7 => [
      ")",
      "}",
      ";",
      "|"],
    :_encapsulatedShape_8 => [
      ")",
      "}",
      ";",
      "|"],
    :exclusion => [
      "-",
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_exclusion_1 => [
      "-",
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_exclusion_2 => [
      "-",
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_exclusion_3 => [
      "-",
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :groupShape => [
      ")",
      "}",
      "|"],
    :_groupShape_1 => [
      ")",
      "}",
      "|"],
    :_groupShape_2 => [
      ";",
      ")",
      "}",
      "|"],
    :_groupShape_3 => [
      ")",
      "}",
      "|"],
    :_groupShape_4 => [
      ";",
      ")",
      "}",
      "|"],
    :_groupShape_5 => [
      ")",
      "}",
      "|"],
    :_groupShape_6 => [
      ")",
      "}",
      "|"],
    :_groupShape_7 => [
      ";",
      ")",
      "}",
      "|"],
    :inclPropertySet => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_inclPropertySet_1 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_inclPropertySet_2 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_inclPropertySet_3 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_inclPropertySet_4 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_inclPropertySet_5 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_inclPropertySet_6 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :include => [
      ")",
      "}",
      ";",
      "|"],
    :includeSet => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_includeSet_1 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_includeSet_2 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_includeSet_3 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_includeSet_4 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_includeSet_5 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_includeSet_6 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_include_1 => [
      ")",
      "}",
      ";",
      "|"],
    :iri => [
      "EXTERNAL",
      "~",
      :CODE,
      "%",
      "]",
      ")",
      "}",
      "{",
      :IRIREF,
      :RDF_TYPE,
      "(",
      "-",
      ";",
      "|",
      :BLANK_NODE_LABEL,
      "CLOSED",
      :PNAME_LN,
      :PNAME_NS,
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "AND",
      "OR",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "//",
      "PATTERN",
      "&",
      "EXTRA",
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      ".",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "!",
      "^",
      "NOT",
      "LITERAL",
      "[",
      "BASE",
      "PREFIX",
      "start",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@"],
    :iriRange => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_1 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_10 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_11 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_12 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_13 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_14 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_15 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_2 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_3 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_4 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_5 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_6 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_7 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_8 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_iriRange_9 => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :literal => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :negShapeAtom => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_negShapeAtom_1 => [
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_negShapeAtom_2 => [
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_negShapeAtom_3 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :nonLiteralKind => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      ")",
      "PATTERN",
      "~",
      "@",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "}",
      "CLOSED",
      "//",
      ";",
      "|",
      "&",
      "EXTRA",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :notStartAction => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :numericFacet => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_numericFacet_1 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_numericFacet_2 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_numericFacet_3 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_numericFacet_4 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_numericFacet_5 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_numericFacet_6 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :numericLength => [
      :INTEGER],
    :numericLiteral => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "PATTERN",
      "~",
      "AND",
      "OR",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      :PNAME_LN,
      :PNAME_NS,
      "BASE",
      "PREFIX",
      "start",
      :BLANK_NODE_LABEL],
    :numericRange => [
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2],
    :predicate => [
      :IRIREF,
      :RDF_TYPE,
      "{",
      :PNAME_LN,
      :PNAME_NS,
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "CLOSED",
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      "&",
      "EXTRA",
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@"],
    :prefixDecl => [
      :_eof,
      "BASE",
      "PREFIX",
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_prefixDecl_1 => [
      :_eof,
      "BASE",
      "PREFIX",
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :prefixedName => [
      "EXTERNAL",
      "~",
      :CODE,
      "%",
      "]",
      ")",
      "}",
      "{",
      :IRIREF,
      :RDF_TYPE,
      "(",
      "-",
      ";",
      "|",
      :BLANK_NODE_LABEL,
      "CLOSED",
      :PNAME_LN,
      :PNAME_NS,
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "AND",
      "OR",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "//",
      "PATTERN",
      "&",
      "EXTRA",
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      ".",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "!",
      "^",
      "NOT",
      "LITERAL",
      "[",
      "BASE",
      "PREFIX",
      "start",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@"],
    :productionLabel => [
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_productionLabel_1 => [
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_productionLabel_2 => [
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :rdfLiteral => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_rdfLiteral_1 => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_rdfLiteral_2 => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_rdfLiteral_3 => [
      "]",
      ")",
      "//",
      "%",
      "PATTERN",
      "~",
      "AND",
      "OR",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS,
      "BASE",
      "PREFIX",
      "start",
      :BLANK_NODE_LABEL],
    :_rdfLiteral_4 => [
      "]",
      "//",
      "%",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :_rdfLiteral_5 => [
      "]",
      ")",
      "//",
      "%",
      "PATTERN",
      "~",
      "AND",
      "OR",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS,
      "BASE",
      "PREFIX",
      "start",
      :BLANK_NODE_LABEL],
    :semanticActions => [
      :_eof,
      ")",
      "}",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_semanticActions_1 => [
      :_eof,
      ")",
      "}",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_semanticActions_2 => [
      :_eof,
      ")",
      "}",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :senseFlags => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_senseFlags_1 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_senseFlags_2 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_senseFlags_3 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_senseFlags_4 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_senseFlags_5 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_senseFlags_6 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :shape => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeAtom => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_1 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_10 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@",
      ")",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "CLOSED",
      "}",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_11 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_12 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_13 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_14 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_15 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_16 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_17 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_18 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@",
      ")",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "CLOSED",
      "}",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_19 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_2 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_20 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_21 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_22 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_23 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_24 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_25 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_3 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_4 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_5 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_6 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_7 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_8 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@",
      ")",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "CLOSED",
      "}",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeAtom_9 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeConjunction => [
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeConjunction_1 => [
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeConjunction_2 => [
      "AND",
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeConjunction_3 => [
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeConjunction_4 => [
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeConjunction_5 => [
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeConjunction_6 => [
      "AND",
      ")",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeDefinition => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDefinition_1 => [
      "{"],
    :_shapeDefinition_2 => [
      "}"],
    :_shapeDefinition_3 => [
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shapeDefinition_4 => [
      "{"],
    :_shapeDefinition_5 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDefinition_6 => [
      "{"],
    :_shapeDefinition_7 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDefinition_8 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeDisjunction => [
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDisjunction_1 => [
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDisjunction_2 => [
      "OR",
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDisjunction_3 => [
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDisjunction_4 => [
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDisjunction_5 => [
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeDisjunction_6 => [
      "OR",
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeExpression => [
      ")",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :shapeLabel => [
      "EXTERNAL",
      ")",
      "}",
      "{",
      ";",
      "|",
      :IRIREF,
      :BLANK_NODE_LABEL,
      "CLOSED",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      :PNAME_LN,
      :PNAME_NS,
      "&",
      "EXTRA",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "//",
      "BASE",
      "PREFIX",
      "start",
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      "@"],
    :shapeOrRef => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeOrRef_1 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shapeOrRef_2 => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shape_1 => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shape_2 => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shape_3 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shape_4 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :_shape_5 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shape_6 => [
      "%",
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shape_7 => [
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "IRI",
      "BNODE",
      "NONLITERAL",
      :ATPNAME_LN,
      :ATPNAME_NS,
      :IRIREF,
      "@",
      :PNAME_LN,
      :PNAME_NS,
      "{",
      "CLOSED",
      "&",
      "EXTRA"],
    :shexDoc => [
      :_eof],
    :_shexDoc_1 => [
      :_eof,
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_10 => [
      :_eof],
    :_shexDoc_11 => [
      :_eof],
    :_shexDoc_2 => [
      :_eof],
    :_shexDoc_3 => [
      :_eof,
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_4 => [
      :_eof],
    :_shexDoc_5 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_shexDoc_6 => [
      :_eof],
    :_shexDoc_7 => [
      :_eof],
    :_shexDoc_8 => [
      :_eof],
    :_shexDoc_9 => [
      :_eof,
      "%",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :someOfShape => [
      "}"],
    :_someOfShape_1 => [
      "}"],
    :_someOfShape_2 => [
      "|",
      "}"],
    :_someOfShape_3 => [
      "}"],
    :_someOfShape_4 => [
      "}"],
    :_someOfShape_5 => [
      "}"],
    :_someOfShape_6 => [
      "|",
      "}"],
    :start => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :startActions => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_startActions_1 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_startActions_2 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_startActions_3 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_startActions_4 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_start_1 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_start_2 => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :statement => [
      :_eof,
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :string => [
      "^^",
      :LANGTAG,
      "]",
      :ATPNAME_LN,
      :ATPNAME_NS,
      "//",
      "%",
      "PATTERN",
      "~",
      "@",
      ")",
      "}",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      ";",
      "|",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      "NOT",
      "!",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      :PNAME_LN,
      :PNAME_NS,
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "BASE",
      "PREFIX",
      "start",
      :BLANK_NODE_LABEL],
    :stringFacet => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :_stringFacet_1 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :_stringFacet_2 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :_stringFacet_3 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :_stringFacet_4 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :_stringFacet_5 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :_stringFacet_6 => [
      :ATPNAME_LN,
      :ATPNAME_NS,
      "PATTERN",
      "~",
      "@",
      ")",
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "{",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "NOT",
      "!",
      ".",
      "LITERAL",
      "[",
      "(",
      "CLOSED",
      "}",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "IRI",
      "BNODE",
      "NONLITERAL",
      "&",
      "EXTRA",
      "//",
      ";",
      "|",
      :IRIREF,
      "BASE",
      "PREFIX",
      "start",
      :PNAME_LN,
      :PNAME_NS,
      :BLANK_NODE_LABEL],
    :stringLength => [
      :INTEGER],
    :tripleConstraint => [
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_1 => [
      :RDF_TYPE,
      :IRIREF,
      :PNAME_LN,
      :PNAME_NS],
    :_tripleConstraint_2 => [
      "%",
      "//",
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_3 => [
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_4 => [
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_5 => [
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_6 => [
      "%",
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_7 => [
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_8 => [
      ")",
      "}",
      ";",
      "|"],
    :_tripleConstraint_9 => [
      ")",
      "}",
      ";",
      "|"],
    :unaryShape => [
      ")",
      "}",
      ";",
      "|"],
    :_unaryShape_1 => [
      ")",
      "}",
      ";",
      "|"],
    :_unaryShape_2 => [
      "(",
      :RDF_TYPE,
      :IRIREF,
      "!",
      "^",
      :PNAME_LN,
      :PNAME_NS],
    :_unaryShape_3 => [
      ")",
      "}",
      ";",
      "|"],
    :_unaryShape_4 => [
      ")",
      "}",
      ";",
      "|"],
    :value => [
      "]",
      ".",
      :INTEGER,
      :DECIMAL,
      :DOUBLE,
      "true",
      "false",
      :IRIREF,
      :STRING_LITERAL1,
      :STRING_LITERAL2,
      :STRING_LITERAL_LONG1,
      :STRING_LITERAL_LONG2,
      :PNAME_LN,
      :PNAME_NS],
    :valueSet => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_valueSet_1 => [
      "]"],
    :_valueSet_2 => [
      "]"],
    :_valueSet_3 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :_valueSet_4 => [
      "]"],
    :_valueSet_5 => [
      ")",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
    :xsFacet => [
      ")",
      "PATTERN",
      "~",
      "AND",
      "OR",
      "%",
      :_eof,
      "*",
      "+",
      "?",
      :REPEAT_RANGE,
      "LENGTH",
      "MINLENGTH",
      "MAXLENGTH",
      "MININCLUSIVE",
      "MINEXCLUSIVE",
      "MAXINCLUSIVE",
      "MAXEXCLUSIVE",
      "TOTALDIGITS",
      "FRACTIONDIGITS",
      "}",
      "//",
      ";",
      "|",
      "BASE",
      "PREFIX",
      "start",
      :IRIREF,
      :BLANK_NODE_LABEL,
      :PNAME_LN,
      :PNAME_NS],
  }.freeze
  CLEANUP = {
    :_encapsulatedShape_1 => :opt,
    :_encapsulatedShape_2 => :star,
    :_encapsulatedShape_3 => :merge,
    :_exclusion_1 => :opt,
    :_groupShape_1 => :star,
    :_groupShape_3 => :merge,
    :_groupShape_4 => :opt,
    :_inclPropertySet_1 => :plus,
    :_inclPropertySet_2 => :star,
    :_inclPropertySet_3 => :merge,
    :_includeSet_1 => :plus,
    :_includeSet_2 => :star,
    :_includeSet_3 => :merge,
    :_iriRange_3 => :opt,
    :_iriRange_5 => :star,
    :_iriRange_6 => :merge,
    :_iriRange_7 => :plus,
    :_iriRange_8 => :star,
    :_iriRange_9 => :merge,
    :_negShapeAtom_1 => :opt,
    :_rdfLiteral_1 => :opt,
    :semanticActions => :star,
    :_semanticActions_1 => :merge,
    :_senseFlags_3 => :opt,
    :_senseFlags_4 => :opt,
    :_shapeAtom_10 => :merge,
    :_shapeAtom_11 => :star,
    :_shapeAtom_12 => :merge,
    :_shapeAtom_13 => :star,
    :_shapeAtom_14 => :merge,
    :_shapeAtom_6 => :star,
    :_shapeAtom_7 => :merge,
    :_shapeAtom_8 => :star,
    :_shapeAtom_9 => :opt,
    :_shapeConjunction_1 => :star,
    :_shapeConjunction_3 => :merge,
    :_shapeDefinition_1 => :star,
    :_shapeDefinition_2 => :opt,
    :_shapeDefinition_4 => :merge,
    :_shapeDisjunction_1 => :star,
    :_shapeDisjunction_3 => :merge,
    :_shape_3 => :star,
    :_shape_4 => :merge,
    :_shexDoc_1 => :star,
    :_shexDoc_2 => :opt,
    :_shexDoc_3 => :merge,
    :_shexDoc_6 => :star,
    :_shexDoc_7 => :merge,
    :_someOfShape_1 => :star,
    :_someOfShape_3 => :merge,
    :startActions => :plus,
    :_startActions_1 => :star,
    :_startActions_2 => :merge,
    :_tripleConstraint_1 => :opt,
    :_tripleConstraint_2 => :opt,
    :_tripleConstraint_3 => :star,
    :_tripleConstraint_4 => :merge,
    :_unaryShape_2 => :opt,
    :_valueSet_1 => :star,
    :_valueSet_2 => :merge,
  }.freeze
  PASS = [
    [:seq, "#", [:star, [:range, "^\r\n"]]]
  ].freeze
end

